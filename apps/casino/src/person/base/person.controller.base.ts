/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PersonService } from "../person.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PersonCreateInput } from "./PersonCreateInput";
import { Person } from "./Person";
import { PersonFindManyArgs } from "./PersonFindManyArgs";
import { PersonWhereUniqueInput } from "./PersonWhereUniqueInput";
import { PersonUpdateInput } from "./PersonUpdateInput";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountWhereUniqueInput } from "../../account/base/AccountWhereUniqueInput";
import { StatGameFindManyArgs } from "../../statGame/base/StatGameFindManyArgs";
import { StatGame } from "../../statGame/base/StatGame";
import { StatGameWhereUniqueInput } from "../../statGame/base/StatGameWhereUniqueInput";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { MessageWhereUniqueInput } from "../../message/base/MessageWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PersonControllerBase {
  constructor(
    protected readonly service: PersonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Person })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPerson(@common.Body() data: PersonCreateInput): Promise<Person> {
    return await this.service.createPerson({
      data: data,
      select: {
        activeAccountId: true,
        activeShopId: true,
        avatar: true,
        cashtag: true,
        createdAt: true,
        deletedAt: true,
        email: true,
        emailConfirmed: true,
        embeddings: true,
        favorites: true,
        id: true,
        isDeleted: true,
        isFirstDeposit: true,
        isSupended: true,
        lastSignInAt: true,
        password: true,
        personInfo: true,
        personname: true,
        phone: true,
        phoneConfirmed: true,
        resetPasswordToken: true,
        updatedAt: true,
        vipLevel: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Person] })
  @ApiNestedQuery(PersonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async people(@common.Req() request: Request): Promise<Person[]> {
    const args = plainToClass(PersonFindManyArgs, request.query);
    return this.service.people({
      ...args,
      select: {
        activeAccountId: true,
        activeShopId: true,
        avatar: true,
        cashtag: true,
        createdAt: true,
        deletedAt: true,
        email: true,
        emailConfirmed: true,
        embeddings: true,
        favorites: true,
        id: true,
        isDeleted: true,
        isFirstDeposit: true,
        isSupended: true,
        lastSignInAt: true,
        password: true,
        personInfo: true,
        personname: true,
        phone: true,
        phoneConfirmed: true,
        resetPasswordToken: true,
        updatedAt: true,
        vipLevel: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async person(
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Person | null> {
    const result = await this.service.person({
      where: params,
      select: {
        activeAccountId: true,
        activeShopId: true,
        avatar: true,
        cashtag: true,
        createdAt: true,
        deletedAt: true,
        email: true,
        emailConfirmed: true,
        embeddings: true,
        favorites: true,
        id: true,
        isDeleted: true,
        isFirstDeposit: true,
        isSupended: true,
        lastSignInAt: true,
        password: true,
        personInfo: true,
        personname: true,
        phone: true,
        phoneConfirmed: true,
        resetPasswordToken: true,
        updatedAt: true,
        vipLevel: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePerson(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() data: PersonUpdateInput
  ): Promise<Person | null> {
    try {
      return await this.service.updatePerson({
        where: params,
        data: data,
        select: {
          activeAccountId: true,
          activeShopId: true,
          avatar: true,
          cashtag: true,
          createdAt: true,
          deletedAt: true,
          email: true,
          emailConfirmed: true,
          embeddings: true,
          favorites: true,
          id: true,
          isDeleted: true,
          isFirstDeposit: true,
          isSupended: true,
          lastSignInAt: true,
          password: true,
          personInfo: true,
          personname: true,
          phone: true,
          phoneConfirmed: true,
          resetPasswordToken: true,
          updatedAt: true,
          vipLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePerson(
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Person | null> {
    try {
      return await this.service.deletePerson({
        where: params,
        select: {
          activeAccountId: true,
          activeShopId: true,
          avatar: true,
          cashtag: true,
          createdAt: true,
          deletedAt: true,
          email: true,
          emailConfirmed: true,
          embeddings: true,
          favorites: true,
          id: true,
          isDeleted: true,
          isFirstDeposit: true,
          isSupended: true,
          lastSignInAt: true,
          password: true,
          personInfo: true,
          personname: true,
          phone: true,
          phoneConfirmed: true,
          resetPasswordToken: true,
          updatedAt: true,
          vipLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accounts")
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findAccounts(params.id, {
      ...query,
      select: {
        avatar: true,
        balance: true,
        countBalance: true,
        createdAt: true,
        currency: true,
        faceVerificationTime: true,
        id: true,
        isActive: true,
        isExcluded: true,

        person: {
          select: {
            id: true,
          },
        },

        personname: true,
        role: true,
        rtp: true,

        shop: {
          select: {
            id: true,
          },
        },

        totalBonusWon: true,
        totalCashIn: true,
        totalCashOut: true,
        totalLost: true,
        totalWon: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectAccounts(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateAccounts(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectAccounts(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/gameStats")
  @ApiNestedQuery(StatGameFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  async findGameStats(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<StatGame[]> {
    const query = plainToClass(StatGameFindManyArgs, request.query);
    const results = await this.service.findGameStats(params.id, {
      ...query,
      select: {
        balance: true,
        bet: true,
        bonusBank: true,
        createdAt: true,
        dateTime: true,
        deletedAt: true,
        denomination: true,
        fishBank: true,
        gameBank: true,

        gameItem: {
          select: {
            id: true,
          },
        },

        id: true,
        inGame: true,
        inJpg: true,
        inProfit: true,
        isDeleted: true,
        jackBalance: true,
        littleBank: true,

        person: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },

        slotsBank: true,
        tableBank: true,
        totalBank: true,
        updatedAt: true,
        win: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gameStats")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectGameStats(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameStats: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gameStats")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateGameStats(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameStats: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gameStats")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectGameStats(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameStats: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/messages")
  @ApiNestedQuery(MessageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findMessages(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Message[]> {
    const query = plainToClass(MessageFindManyArgs, request.query);
    const results = await this.service.findMessages(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        room: {
          select: {
            id: true,
          },
        },

        text: true,
        typeField: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectMessages(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateMessages(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectMessages(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }
}
