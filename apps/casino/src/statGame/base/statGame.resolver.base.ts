/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StatGame } from "./StatGame";
import { StatGameCountArgs } from "./StatGameCountArgs";
import { StatGameFindManyArgs } from "./StatGameFindManyArgs";
import { StatGameFindUniqueArgs } from "./StatGameFindUniqueArgs";
import { CreateStatGameArgs } from "./CreateStatGameArgs";
import { UpdateStatGameArgs } from "./UpdateStatGameArgs";
import { DeleteStatGameArgs } from "./DeleteStatGameArgs";
import { Game } from "../../game/base/Game";
import { Person } from "../../person/base/Person";
import { Shop } from "../../shop/base/Shop";
import { StatGameService } from "../statGame.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StatGame)
export class StatGameResolverBase {
  constructor(
    protected readonly service: StatGameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  async _statGamesMeta(
    @graphql.Args() args: StatGameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StatGame])
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  async statGames(
    @graphql.Args() args: StatGameFindManyArgs
  ): Promise<StatGame[]> {
    return this.service.statGames(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StatGame, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "own",
  })
  async statGame(
    @graphql.Args() args: StatGameFindUniqueArgs
  ): Promise<StatGame | null> {
    const result = await this.service.statGame(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StatGame)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "create",
    possession: "any",
  })
  async createStatGame(
    @graphql.Args() args: CreateStatGameArgs
  ): Promise<StatGame> {
    return await this.service.createStatGame({
      ...args,
      data: {
        ...args.data,

        gameItem: {
          connect: args.data.gameItem,
        },

        person: {
          connect: args.data.person,
        },

        shop: {
          connect: args.data.shop,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StatGame)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "update",
    possession: "any",
  })
  async updateStatGame(
    @graphql.Args() args: UpdateStatGameArgs
  ): Promise<StatGame | null> {
    try {
      return await this.service.updateStatGame({
        ...args,
        data: {
          ...args.data,

          gameItem: {
            connect: args.data.gameItem,
          },

          person: {
            connect: args.data.person,
          },

          shop: {
            connect: args.data.shop,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StatGame)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "delete",
    possession: "any",
  })
  async deleteStatGame(
    @graphql.Args() args: DeleteStatGameArgs
  ): Promise<StatGame | null> {
    try {
      return await this.service.deleteStatGame(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Game, {
    nullable: true,
    name: "gameItem",
  })
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "read",
    possession: "any",
  })
  async getGameItem(@graphql.Parent() parent: StatGame): Promise<Game | null> {
    const result = await this.service.getGameItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(@graphql.Parent() parent: StatGame): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Shop, {
    nullable: true,
    name: "shop",
  })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async getShop(@graphql.Parent() parent: StatGame): Promise<Shop | null> {
    const result = await this.service.getShop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
