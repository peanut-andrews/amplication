/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StatGameService } from "../statGame.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StatGameCreateInput } from "./StatGameCreateInput";
import { StatGame } from "./StatGame";
import { StatGameFindManyArgs } from "./StatGameFindManyArgs";
import { StatGameWhereUniqueInput } from "./StatGameWhereUniqueInput";
import { StatGameUpdateInput } from "./StatGameUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StatGameControllerBase {
  constructor(
    protected readonly service: StatGameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StatGame })
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStatGame(
    @common.Body() data: StatGameCreateInput
  ): Promise<StatGame> {
    return await this.service.createStatGame({
      data: {
        ...data,

        gameItem: {
          connect: data.gameItem,
        },

        person: {
          connect: data.person,
        },

        shop: {
          connect: data.shop,
        },
      },
      select: {
        balance: true,
        bet: true,
        bonusBank: true,
        createdAt: true,
        dateTime: true,
        deletedAt: true,
        denomination: true,
        fishBank: true,
        gameBank: true,

        gameItem: {
          select: {
            id: true,
          },
        },

        id: true,
        inGame: true,
        inJpg: true,
        inProfit: true,
        isDeleted: true,
        jackBalance: true,
        littleBank: true,

        person: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },

        slotsBank: true,
        tableBank: true,
        totalBank: true,
        updatedAt: true,
        win: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [StatGame] })
  @ApiNestedQuery(StatGameFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async statGames(@common.Req() request: Request): Promise<StatGame[]> {
    const args = plainToClass(StatGameFindManyArgs, request.query);
    return this.service.statGames({
      ...args,
      select: {
        balance: true,
        bet: true,
        bonusBank: true,
        createdAt: true,
        dateTime: true,
        deletedAt: true,
        denomination: true,
        fishBank: true,
        gameBank: true,

        gameItem: {
          select: {
            id: true,
          },
        },

        id: true,
        inGame: true,
        inJpg: true,
        inProfit: true,
        isDeleted: true,
        jackBalance: true,
        littleBank: true,

        person: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },

        slotsBank: true,
        tableBank: true,
        totalBank: true,
        updatedAt: true,
        win: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StatGame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async statGame(
    @common.Param() params: StatGameWhereUniqueInput
  ): Promise<StatGame | null> {
    const result = await this.service.statGame({
      where: params,
      select: {
        balance: true,
        bet: true,
        bonusBank: true,
        createdAt: true,
        dateTime: true,
        deletedAt: true,
        denomination: true,
        fishBank: true,
        gameBank: true,

        gameItem: {
          select: {
            id: true,
          },
        },

        id: true,
        inGame: true,
        inJpg: true,
        inProfit: true,
        isDeleted: true,
        jackBalance: true,
        littleBank: true,

        person: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },

        slotsBank: true,
        tableBank: true,
        totalBank: true,
        updatedAt: true,
        win: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StatGame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStatGame(
    @common.Param() params: StatGameWhereUniqueInput,
    @common.Body() data: StatGameUpdateInput
  ): Promise<StatGame | null> {
    try {
      return await this.service.updateStatGame({
        where: params,
        data: {
          ...data,

          gameItem: {
            connect: data.gameItem,
          },

          person: {
            connect: data.person,
          },

          shop: {
            connect: data.shop,
          },
        },
        select: {
          balance: true,
          bet: true,
          bonusBank: true,
          createdAt: true,
          dateTime: true,
          deletedAt: true,
          denomination: true,
          fishBank: true,
          gameBank: true,

          gameItem: {
            select: {
              id: true,
            },
          },

          id: true,
          inGame: true,
          inJpg: true,
          inProfit: true,
          isDeleted: true,
          jackBalance: true,
          littleBank: true,

          person: {
            select: {
              id: true,
            },
          },

          shop: {
            select: {
              id: true,
            },
          },

          slotsBank: true,
          tableBank: true,
          totalBank: true,
          updatedAt: true,
          win: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StatGame })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStatGame(
    @common.Param() params: StatGameWhereUniqueInput
  ): Promise<StatGame | null> {
    try {
      return await this.service.deleteStatGame({
        where: params,
        select: {
          balance: true,
          bet: true,
          bonusBank: true,
          createdAt: true,
          dateTime: true,
          deletedAt: true,
          denomination: true,
          fishBank: true,
          gameBank: true,

          gameItem: {
            select: {
              id: true,
            },
          },

          id: true,
          inGame: true,
          inJpg: true,
          inProfit: true,
          isDeleted: true,
          jackBalance: true,
          littleBank: true,

          person: {
            select: {
              id: true,
            },
          },

          shop: {
            select: {
              id: true,
            },
          },

          slotsBank: true,
          tableBank: true,
          totalBank: true,
          updatedAt: true,
          win: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
