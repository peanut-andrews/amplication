/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Game as PrismaGame,
  Bet as PrismaBet,
  StatGame as PrismaStatGame,
  Shop as PrismaShop,
} from "@prisma/client";

export class GameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GameCountArgs, "select">): Promise<number> {
    return this.prisma.game.count(args);
  }

  async games(args: Prisma.GameFindManyArgs): Promise<PrismaGame[]> {
    return this.prisma.game.findMany(args);
  }
  async game(args: Prisma.GameFindUniqueArgs): Promise<PrismaGame | null> {
    return this.prisma.game.findUnique(args);
  }
  async createGame(args: Prisma.GameCreateArgs): Promise<PrismaGame> {
    return this.prisma.game.create(args);
  }
  async updateGame(args: Prisma.GameUpdateArgs): Promise<PrismaGame> {
    return this.prisma.game.update(args);
  }
  async deleteGame(args: Prisma.GameDeleteArgs): Promise<PrismaGame> {
    return this.prisma.game.delete(args);
  }

  async findBets(
    parentId: string,
    args: Prisma.BetFindManyArgs
  ): Promise<PrismaBet[]> {
    return this.prisma.game
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bets(args);
  }

  async findStats(
    parentId: string,
    args: Prisma.StatGameFindManyArgs
  ): Promise<PrismaStatGame[]> {
    return this.prisma.game
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stats(args);
  }

  async getShop(parentId: string): Promise<PrismaShop | null> {
    return this.prisma.game
      .findUnique({
        where: { id: parentId },
      })
      .shop();
  }
}
