/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GameService } from "../game.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameCreateInput } from "./GameCreateInput";
import { Game } from "./Game";
import { GameFindManyArgs } from "./GameFindManyArgs";
import { GameWhereUniqueInput } from "./GameWhereUniqueInput";
import { GameUpdateInput } from "./GameUpdateInput";
import { BetFindManyArgs } from "../../bet/base/BetFindManyArgs";
import { Bet } from "../../bet/base/Bet";
import { BetWhereUniqueInput } from "../../bet/base/BetWhereUniqueInput";
import { StatGameFindManyArgs } from "../../statGame/base/StatGameFindManyArgs";
import { StatGame } from "../../statGame/base/StatGame";
import { StatGameWhereUniqueInput } from "../../statGame/base/StatGameWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GameControllerBase {
  constructor(
    protected readonly service: GameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Game })
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createGame(@common.Body() data: GameCreateInput): Promise<Game> {
    return await this.service.createGame({
      data: {
        ...data,

        shop: data.shop
          ? {
              connect: data.shop,
            }
          : undefined,
      },
      select: {
        advanced: true,
        bet: true,
        bids: true,
        cask: true,
        categoryId: true,
        categoryTemp: true,
        chanceFirepot1: true,
        chanceFirepot2: true,
        chanceFirepot3: true,
        createdAt: true,
        currentRtp: true,
        denomination: true,
        developer: true,
        device: true,
        featured: true,
        fireCount1: true,
        fireCount2: true,
        fireCount3: true,
        gamebank: true,
        id: true,
        isActive: true,
        jackpotGroupId: true,
        jpgId: true,
        linesPercentConfigBonus: true,
        linesPercentConfigBonusBonus: true,
        linesPercentConfigSpin: true,
        linesPercentConfigSpinBonus: true,
        name: true,
        originalId: true,
        popularity: true,
        providerId: true,
        rezerv: true,
        rtpStatIn: true,
        rtpStatOut: true,
        scaleMode: true,

        shop: {
          select: {
            id: true,
          },
        },

        slotViewState: true,
        standardRtp: true,
        statIn: true,
        statOut: true,
        title: true,
        updatedAt: true,
        view: true,
        vipLevel: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Game] })
  @ApiNestedQuery(GameFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async games(@common.Req() request: Request): Promise<Game[]> {
    const args = plainToClass(GameFindManyArgs, request.query);
    return this.service.games({
      ...args,
      select: {
        advanced: true,
        bet: true,
        bids: true,
        cask: true,
        categoryId: true,
        categoryTemp: true,
        chanceFirepot1: true,
        chanceFirepot2: true,
        chanceFirepot3: true,
        createdAt: true,
        currentRtp: true,
        denomination: true,
        developer: true,
        device: true,
        featured: true,
        fireCount1: true,
        fireCount2: true,
        fireCount3: true,
        gamebank: true,
        id: true,
        isActive: true,
        jackpotGroupId: true,
        jpgId: true,
        linesPercentConfigBonus: true,
        linesPercentConfigBonusBonus: true,
        linesPercentConfigSpin: true,
        linesPercentConfigSpinBonus: true,
        name: true,
        originalId: true,
        popularity: true,
        providerId: true,
        rezerv: true,
        rtpStatIn: true,
        rtpStatOut: true,
        scaleMode: true,

        shop: {
          select: {
            id: true,
          },
        },

        slotViewState: true,
        standardRtp: true,
        statIn: true,
        statOut: true,
        title: true,
        updatedAt: true,
        view: true,
        vipLevel: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Game })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async game(
    @common.Param() params: GameWhereUniqueInput
  ): Promise<Game | null> {
    const result = await this.service.game({
      where: params,
      select: {
        advanced: true,
        bet: true,
        bids: true,
        cask: true,
        categoryId: true,
        categoryTemp: true,
        chanceFirepot1: true,
        chanceFirepot2: true,
        chanceFirepot3: true,
        createdAt: true,
        currentRtp: true,
        denomination: true,
        developer: true,
        device: true,
        featured: true,
        fireCount1: true,
        fireCount2: true,
        fireCount3: true,
        gamebank: true,
        id: true,
        isActive: true,
        jackpotGroupId: true,
        jpgId: true,
        linesPercentConfigBonus: true,
        linesPercentConfigBonusBonus: true,
        linesPercentConfigSpin: true,
        linesPercentConfigSpinBonus: true,
        name: true,
        originalId: true,
        popularity: true,
        providerId: true,
        rezerv: true,
        rtpStatIn: true,
        rtpStatOut: true,
        scaleMode: true,

        shop: {
          select: {
            id: true,
          },
        },

        slotViewState: true,
        standardRtp: true,
        statIn: true,
        statOut: true,
        title: true,
        updatedAt: true,
        view: true,
        vipLevel: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Game })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateGame(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() data: GameUpdateInput
  ): Promise<Game | null> {
    try {
      return await this.service.updateGame({
        where: params,
        data: {
          ...data,

          shop: data.shop
            ? {
                connect: data.shop,
              }
            : undefined,
        },
        select: {
          advanced: true,
          bet: true,
          bids: true,
          cask: true,
          categoryId: true,
          categoryTemp: true,
          chanceFirepot1: true,
          chanceFirepot2: true,
          chanceFirepot3: true,
          createdAt: true,
          currentRtp: true,
          denomination: true,
          developer: true,
          device: true,
          featured: true,
          fireCount1: true,
          fireCount2: true,
          fireCount3: true,
          gamebank: true,
          id: true,
          isActive: true,
          jackpotGroupId: true,
          jpgId: true,
          linesPercentConfigBonus: true,
          linesPercentConfigBonusBonus: true,
          linesPercentConfigSpin: true,
          linesPercentConfigSpinBonus: true,
          name: true,
          originalId: true,
          popularity: true,
          providerId: true,
          rezerv: true,
          rtpStatIn: true,
          rtpStatOut: true,
          scaleMode: true,

          shop: {
            select: {
              id: true,
            },
          },

          slotViewState: true,
          standardRtp: true,
          statIn: true,
          statOut: true,
          title: true,
          updatedAt: true,
          view: true,
          vipLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Game })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGame(
    @common.Param() params: GameWhereUniqueInput
  ): Promise<Game | null> {
    try {
      return await this.service.deleteGame({
        where: params,
        select: {
          advanced: true,
          bet: true,
          bids: true,
          cask: true,
          categoryId: true,
          categoryTemp: true,
          chanceFirepot1: true,
          chanceFirepot2: true,
          chanceFirepot3: true,
          createdAt: true,
          currentRtp: true,
          denomination: true,
          developer: true,
          device: true,
          featured: true,
          fireCount1: true,
          fireCount2: true,
          fireCount3: true,
          gamebank: true,
          id: true,
          isActive: true,
          jackpotGroupId: true,
          jpgId: true,
          linesPercentConfigBonus: true,
          linesPercentConfigBonusBonus: true,
          linesPercentConfigSpin: true,
          linesPercentConfigSpinBonus: true,
          name: true,
          originalId: true,
          popularity: true,
          providerId: true,
          rezerv: true,
          rtpStatIn: true,
          rtpStatOut: true,
          scaleMode: true,

          shop: {
            select: {
              id: true,
            },
          },

          slotViewState: true,
          standardRtp: true,
          statIn: true,
          statOut: true,
          title: true,
          updatedAt: true,
          view: true,
          vipLevel: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bets")
  @ApiNestedQuery(BetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bet",
    action: "read",
    possession: "any",
  })
  async findBets(
    @common.Req() request: Request,
    @common.Param() params: GameWhereUniqueInput
  ): Promise<Bet[]> {
    const query = plainToClass(BetFindManyArgs, request.query);
    const results = await this.service.findBets(params.id, {
      ...query,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        betAmount: true,
        createdAt: true,
        currency: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,
        multiplier: true,

        shop: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        winAmount: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  async connectBets(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        connect: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  async updateBets(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        set: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  async disconnectBets(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        disconnect: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stats")
  @ApiNestedQuery(StatGameFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  async findStats(
    @common.Req() request: Request,
    @common.Param() params: GameWhereUniqueInput
  ): Promise<StatGame[]> {
    const query = plainToClass(StatGameFindManyArgs, request.query);
    const results = await this.service.findStats(params.id, {
      ...query,
      select: {
        balance: true,
        bet: true,
        bonusBank: true,
        createdAt: true,
        dateTime: true,
        deletedAt: true,
        denomination: true,
        fishBank: true,
        gameBank: true,

        gameItem: {
          select: {
            id: true,
          },
        },

        id: true,
        inGame: true,
        inJpg: true,
        inProfit: true,
        isDeleted: true,
        jackBalance: true,
        littleBank: true,

        person: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },

        slotsBank: true,
        tableBank: true,
        totalBank: true,
        updatedAt: true,
        win: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stats")
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  async connectStats(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stats: {
        connect: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stats")
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  async updateStats(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stats: {
        set: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stats")
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "update",
    possession: "any",
  })
  async disconnectStats(
    @common.Param() params: GameWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stats: {
        disconnect: body,
      },
    };
    await this.service.updateGame({
      where: params,
      data,
      select: { id: true },
    });
  }
}
