/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FishBank as PrismaFishBank,
  Shop as PrismaShop,
} from "@prisma/client";

export class FishBankServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FishBankCountArgs, "select">): Promise<number> {
    return this.prisma.fishBank.count(args);
  }

  async fishBanks(
    args: Prisma.FishBankFindManyArgs
  ): Promise<PrismaFishBank[]> {
    return this.prisma.fishBank.findMany(args);
  }
  async fishBank(
    args: Prisma.FishBankFindUniqueArgs
  ): Promise<PrismaFishBank | null> {
    return this.prisma.fishBank.findUnique(args);
  }
  async createFishBank(
    args: Prisma.FishBankCreateArgs
  ): Promise<PrismaFishBank> {
    return this.prisma.fishBank.create(args);
  }
  async updateFishBank(
    args: Prisma.FishBankUpdateArgs
  ): Promise<PrismaFishBank> {
    return this.prisma.fishBank.update(args);
  }
  async deleteFishBank(
    args: Prisma.FishBankDeleteArgs
  ): Promise<PrismaFishBank> {
    return this.prisma.fishBank.delete(args);
  }

  async getShop(parentId: string): Promise<PrismaShop | null> {
    return this.prisma.fishBank
      .findUnique({
        where: { id: parentId },
      })
      .shop();
  }
}
