/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Shop as PrismaShop,
  Account as PrismaAccount,
  Bet as PrismaBet,
  StatGame as PrismaStatGame,
  Game as PrismaGame,
  Product as PrismaProduct,
  BalanceTransaction as PrismaBalanceTransaction,
  FishBank as PrismaFishBank,
  GameBank as PrismaGameBank,
} from "@prisma/client";

export class ShopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShopCountArgs, "select">): Promise<number> {
    return this.prisma.shop.count(args);
  }

  async shops(args: Prisma.ShopFindManyArgs): Promise<PrismaShop[]> {
    return this.prisma.shop.findMany(args);
  }
  async shop(args: Prisma.ShopFindUniqueArgs): Promise<PrismaShop | null> {
    return this.prisma.shop.findUnique(args);
  }
  async createShop(args: Prisma.ShopCreateArgs): Promise<PrismaShop> {
    return this.prisma.shop.create(args);
  }
  async updateShop(args: Prisma.ShopUpdateArgs): Promise<PrismaShop> {
    return this.prisma.shop.update(args);
  }
  async deleteShop(args: Prisma.ShopDeleteArgs): Promise<PrismaShop> {
    return this.prisma.shop.delete(args);
  }

  async findAccounts(
    parentId: string,
    args: Prisma.AccountFindManyArgs
  ): Promise<PrismaAccount[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accounts(args);
  }

  async findBets(
    parentId: string,
    args: Prisma.BetFindManyArgs
  ): Promise<PrismaBet[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bets(args);
  }

  async findGameStatsAccount(
    parentId: string,
    args: Prisma.StatGameFindManyArgs
  ): Promise<PrismaStatGame[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gameStatsAccount(args);
  }

  async findGames(
    parentId: string,
    args: Prisma.GameFindManyArgs
  ): Promise<PrismaGame[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .games(args);
  }

  async findProduct(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .product(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.BalanceTransactionFindManyArgs
  ): Promise<PrismaBalanceTransaction[]> {
    return this.prisma.shop
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getFishBank(parentId: string): Promise<PrismaFishBank | null> {
    return this.prisma.shop
      .findUnique({
        where: { id: parentId },
      })
      .fishBank();
  }

  async getGameBank(parentId: string): Promise<PrismaGameBank | null> {
    return this.prisma.shop
      .findUnique({
        where: { id: parentId },
      })
      .gameBank();
  }
}
