/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ShopService } from "../shop.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ShopCreateInput } from "./ShopCreateInput";
import { Shop } from "./Shop";
import { ShopFindManyArgs } from "./ShopFindManyArgs";
import { ShopWhereUniqueInput } from "./ShopWhereUniqueInput";
import { ShopUpdateInput } from "./ShopUpdateInput";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountWhereUniqueInput } from "../../account/base/AccountWhereUniqueInput";
import { BetFindManyArgs } from "../../bet/base/BetFindManyArgs";
import { Bet } from "../../bet/base/Bet";
import { BetWhereUniqueInput } from "../../bet/base/BetWhereUniqueInput";
import { StatGameFindManyArgs } from "../../statGame/base/StatGameFindManyArgs";
import { StatGame } from "../../statGame/base/StatGame";
import { StatGameWhereUniqueInput } from "../../statGame/base/StatGameWhereUniqueInput";
import { GameFindManyArgs } from "../../game/base/GameFindManyArgs";
import { Game } from "../../game/base/Game";
import { GameWhereUniqueInput } from "../../game/base/GameWhereUniqueInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";
import { BalanceTransactionFindManyArgs } from "../../balanceTransaction/base/BalanceTransactionFindManyArgs";
import { BalanceTransaction } from "../../balanceTransaction/base/BalanceTransaction";
import { BalanceTransactionWhereUniqueInput } from "../../balanceTransaction/base/BalanceTransactionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ShopControllerBase {
  constructor(
    protected readonly service: ShopService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shop })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createShop(@common.Body() data: ShopCreateInput): Promise<Shop> {
    return await this.service.createShop({
      data: {
        ...data,

        fishBank: data.fishBank
          ? {
              connect: data.fishBank,
            }
          : undefined,

        gameBank: data.gameBank
          ? {
              connect: data.gameBank,
            }
          : undefined,
      },
      select: {
        acceptedPaymentMethods: true,
        balance: true,
        code: true,
        createdAt: true,
        description: true,
        facialRecognition: true,

        fishBank: {
          select: {
            id: true,
          },
        },

        gameBank: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isMfaRequired: true,
        name: true,
        shopSettingsId: true,
        tenantId: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Shop] })
  @ApiNestedQuery(ShopFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async shops(@common.Req() request: Request): Promise<Shop[]> {
    const args = plainToClass(ShopFindManyArgs, request.query);
    return this.service.shops({
      ...args,
      select: {
        acceptedPaymentMethods: true,
        balance: true,
        code: true,
        createdAt: true,
        description: true,
        facialRecognition: true,

        fishBank: {
          select: {
            id: true,
          },
        },

        gameBank: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isMfaRequired: true,
        name: true,
        shopSettingsId: true,
        tenantId: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async shop(
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Shop | null> {
    const result = await this.service.shop({
      where: params,
      select: {
        acceptedPaymentMethods: true,
        balance: true,
        code: true,
        createdAt: true,
        description: true,
        facialRecognition: true,

        fishBank: {
          select: {
            id: true,
          },
        },

        gameBank: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isMfaRequired: true,
        name: true,
        shopSettingsId: true,
        tenantId: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateShop(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() data: ShopUpdateInput
  ): Promise<Shop | null> {
    try {
      return await this.service.updateShop({
        where: params,
        data: {
          ...data,

          fishBank: data.fishBank
            ? {
                connect: data.fishBank,
              }
            : undefined,

          gameBank: data.gameBank
            ? {
                connect: data.gameBank,
              }
            : undefined,
        },
        select: {
          acceptedPaymentMethods: true,
          balance: true,
          code: true,
          createdAt: true,
          description: true,
          facialRecognition: true,

          fishBank: {
            select: {
              id: true,
            },
          },

          gameBank: {
            select: {
              id: true,
            },
          },

          id: true,
          isActive: true,
          isMfaRequired: true,
          name: true,
          shopSettingsId: true,
          tenantId: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteShop(
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Shop | null> {
    try {
      return await this.service.deleteShop({
        where: params,
        select: {
          acceptedPaymentMethods: true,
          balance: true,
          code: true,
          createdAt: true,
          description: true,
          facialRecognition: true,

          fishBank: {
            select: {
              id: true,
            },
          },

          gameBank: {
            select: {
              id: true,
            },
          },

          id: true,
          isActive: true,
          isMfaRequired: true,
          name: true,
          shopSettingsId: true,
          tenantId: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accounts")
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findAccounts(params.id, {
      ...query,
      select: {
        avatar: true,
        balance: true,
        countBalance: true,
        createdAt: true,
        currency: true,
        faceVerificationTime: true,
        id: true,
        isActive: true,
        isExcluded: true,

        person: {
          select: {
            id: true,
          },
        },

        personname: true,
        role: true,
        rtp: true,

        shop: {
          select: {
            id: true,
          },
        },

        totalBonusWon: true,
        totalCashIn: true,
        totalCashOut: true,
        totalLost: true,
        totalWon: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectAccounts(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateAccounts(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectAccounts(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bets")
  @ApiNestedQuery(BetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bet",
    action: "read",
    possession: "any",
  })
  async findBets(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Bet[]> {
    const query = plainToClass(BetFindManyArgs, request.query);
    const results = await this.service.findBets(params.id, {
      ...query,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        betAmount: true,
        createdAt: true,
        currency: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,
        multiplier: true,

        shop: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        winAmount: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectBets(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateBets(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectBets(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/gameStatsAccount")
  @ApiNestedQuery(StatGameFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  async findGameStatsAccount(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<StatGame[]> {
    const query = plainToClass(StatGameFindManyArgs, request.query);
    const results = await this.service.findGameStatsAccount(params.id, {
      ...query,
      select: {
        balance: true,
        bet: true,
        bonusBank: true,
        createdAt: true,
        dateTime: true,
        deletedAt: true,
        denomination: true,
        fishBank: true,
        gameBank: true,

        gameItem: {
          select: {
            id: true,
          },
        },

        id: true,
        inGame: true,
        inJpg: true,
        inProfit: true,
        isDeleted: true,
        jackBalance: true,
        littleBank: true,

        person: {
          select: {
            id: true,
          },
        },

        shop: {
          select: {
            id: true,
          },
        },

        slotsBank: true,
        tableBank: true,
        totalBank: true,
        updatedAt: true,
        win: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gameStatsAccount")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectGameStatsAccount(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameStatsAccount: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gameStatsAccount")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateGameStatsAccount(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameStatsAccount: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gameStatsAccount")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectGameStatsAccount(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: StatGameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameStatsAccount: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/games")
  @ApiNestedQuery(GameFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "read",
    possession: "any",
  })
  async findGames(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Game[]> {
    const query = plainToClass(GameFindManyArgs, request.query);
    const results = await this.service.findGames(params.id, {
      ...query,
      select: {
        advanced: true,
        bet: true,
        bids: true,
        cask: true,
        categoryId: true,
        categoryTemp: true,
        chanceFirepot1: true,
        chanceFirepot2: true,
        chanceFirepot3: true,
        createdAt: true,
        currentRtp: true,
        denomination: true,
        developer: true,
        device: true,
        featured: true,
        fireCount1: true,
        fireCount2: true,
        fireCount3: true,
        gamebank: true,
        id: true,
        isActive: true,
        jackpotGroupId: true,
        jpgId: true,
        linesPercentConfigBonus: true,
        linesPercentConfigBonusBonus: true,
        linesPercentConfigSpin: true,
        linesPercentConfigSpinBonus: true,
        name: true,
        originalId: true,
        popularity: true,
        providerId: true,
        rezerv: true,
        rtpStatIn: true,
        rtpStatOut: true,
        scaleMode: true,

        shop: {
          select: {
            id: true,
          },
        },

        slotViewState: true,
        standardRtp: true,
        statIn: true,
        statOut: true,
        title: true,
        updatedAt: true,
        view: true,
        vipLevel: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/games")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectGames(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: GameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      games: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/games")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateGames(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: GameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      games: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/games")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectGames(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: GameWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      games: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/product")
  @ApiNestedQuery(ProductFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProduct(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProduct(params.id, {
      ...query,
      select: {
        amountToReceiveInCents: true,
        bonusCode: true,
        bonusSpins: true,
        bonusTotalInCents: true,
        createdAt: true,
        description: true,
        discountInCents: true,
        id: true,
        isPromo: true,
        priceInCents: true,

        shop: {
          select: {
            id: true,
          },
        },

        title: true,
        totalDiscountInCents: true,
        typeField: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/product")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectProduct(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/product")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateProduct(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/product")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectProduct(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      product: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactions")
  @ApiNestedQuery(BalanceTransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: ShopWhereUniqueInput
  ): Promise<BalanceTransaction[]> {
    const query = plainToClass(BalanceTransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,
        bonusIdUsed: true,
        cashierAccountId: true,
        cashierAvatar: true,
        cashierId: true,
        cashiername: true,
        channel: true,
        createdAt: true,
        currency: true,
        direction: true,
        id: true,
        paymentMethod: true,
        personAvatar: true,
        personId: true,
        personname: true,

        playerAccount: {
          select: {
            id: true,
          },
        },

        playerAccountBalanceAfterTransaction: true,

        product: {
          select: {
            id: true,
          },
        },

        salesCommission: true,

        shop: {
          select: {
            id: true,
          },
        },

        shopBalanceAfterTransaction: true,
        status: true,
        totalInCents: true,
        type: true,
        updateLevel: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async connectTransactions(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: BalanceTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: BalanceTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async disconnectTransactions(
    @common.Param() params: ShopWhereUniqueInput,
    @common.Body() body: BalanceTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateShop({
      where: params,
      data,
      select: { id: true },
    });
  }
}
