/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Shop } from "./Shop";
import { ShopCountArgs } from "./ShopCountArgs";
import { ShopFindManyArgs } from "./ShopFindManyArgs";
import { ShopFindUniqueArgs } from "./ShopFindUniqueArgs";
import { CreateShopArgs } from "./CreateShopArgs";
import { UpdateShopArgs } from "./UpdateShopArgs";
import { DeleteShopArgs } from "./DeleteShopArgs";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { BetFindManyArgs } from "../../bet/base/BetFindManyArgs";
import { Bet } from "../../bet/base/Bet";
import { StatGameFindManyArgs } from "../../statGame/base/StatGameFindManyArgs";
import { StatGame } from "../../statGame/base/StatGame";
import { GameFindManyArgs } from "../../game/base/GameFindManyArgs";
import { Game } from "../../game/base/Game";
import { OpenShiftFindManyArgs } from "../../openShift/base/OpenShiftFindManyArgs";
import { OpenShift } from "../../openShift/base/OpenShift";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { BalanceTransactionFindManyArgs } from "../../balanceTransaction/base/BalanceTransactionFindManyArgs";
import { BalanceTransaction } from "../../balanceTransaction/base/BalanceTransaction";
import { FishBank } from "../../fishBank/base/FishBank";
import { GameBank } from "../../gameBank/base/GameBank";
import { ShopService } from "../shop.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Shop)
export class ShopResolverBase {
  constructor(
    protected readonly service: ShopService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async _shopsMeta(
    @graphql.Args() args: ShopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Shop])
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async shops(@graphql.Args() args: ShopFindManyArgs): Promise<Shop[]> {
    return this.service.shops(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Shop, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "own",
  })
  async shop(@graphql.Args() args: ShopFindUniqueArgs): Promise<Shop | null> {
    const result = await this.service.shop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shop)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "create",
    possession: "any",
  })
  async createShop(@graphql.Args() args: CreateShopArgs): Promise<Shop> {
    return await this.service.createShop({
      ...args,
      data: {
        ...args.data,

        fishBank: args.data.fishBank
          ? {
              connect: args.data.fishBank,
            }
          : undefined,

        gameBank: args.data.gameBank
          ? {
              connect: args.data.gameBank,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shop)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "update",
    possession: "any",
  })
  async updateShop(@graphql.Args() args: UpdateShopArgs): Promise<Shop | null> {
    try {
      return await this.service.updateShop({
        ...args,
        data: {
          ...args.data,

          fishBank: args.data.fishBank
            ? {
                connect: args.data.fishBank,
              }
            : undefined,

          gameBank: args.data.gameBank
            ? {
                connect: args.data.gameBank,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shop)
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "delete",
    possession: "any",
  })
  async deleteShop(@graphql.Args() args: DeleteShopArgs): Promise<Shop | null> {
    try {
      return await this.service.deleteShop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Account], { name: "accounts" })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Bet], { name: "bets" })
  @nestAccessControl.UseRoles({
    resource: "Bet",
    action: "read",
    possession: "any",
  })
  async findBets(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: BetFindManyArgs
  ): Promise<Bet[]> {
    const results = await this.service.findBets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [StatGame], { name: "gameStatsAccount" })
  @nestAccessControl.UseRoles({
    resource: "StatGame",
    action: "read",
    possession: "any",
  })
  async findGameStatsAccount(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: StatGameFindManyArgs
  ): Promise<StatGame[]> {
    const results = await this.service.findGameStatsAccount(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Game], { name: "games" })
  @nestAccessControl.UseRoles({
    resource: "Game",
    action: "read",
    possession: "any",
  })
  async findGames(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: GameFindManyArgs
  ): Promise<Game[]> {
    const results = await this.service.findGames(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OpenShift], { name: "openShifts" })
  @nestAccessControl.UseRoles({
    resource: "OpenShift",
    action: "read",
    possession: "any",
  })
  async findOpenShifts(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: OpenShiftFindManyArgs
  ): Promise<OpenShift[]> {
    const results = await this.service.findOpenShifts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "product" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProduct(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BalanceTransaction], { name: "transactions" })
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @graphql.Parent() parent: Shop,
    @graphql.Args() args: BalanceTransactionFindManyArgs
  ): Promise<BalanceTransaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FishBank, {
    nullable: true,
    name: "fishBank",
  })
  @nestAccessControl.UseRoles({
    resource: "FishBank",
    action: "read",
    possession: "any",
  })
  async getFishBank(@graphql.Parent() parent: Shop): Promise<FishBank | null> {
    const result = await this.service.getFishBank(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => GameBank, {
    nullable: true,
    name: "gameBank",
  })
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "read",
    possession: "any",
  })
  async getGameBank(@graphql.Parent() parent: Shop): Promise<GameBank | null> {
    const result = await this.service.getGameBank(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
