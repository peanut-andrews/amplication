/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameBank } from "./GameBank";
import { GameBankCountArgs } from "./GameBankCountArgs";
import { GameBankFindManyArgs } from "./GameBankFindManyArgs";
import { GameBankFindUniqueArgs } from "./GameBankFindUniqueArgs";
import { CreateGameBankArgs } from "./CreateGameBankArgs";
import { UpdateGameBankArgs } from "./UpdateGameBankArgs";
import { DeleteGameBankArgs } from "./DeleteGameBankArgs";
import { Shop } from "../../shop/base/Shop";
import { GameBankService } from "../gameBank.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameBank)
export class GameBankResolverBase {
  constructor(
    protected readonly service: GameBankService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "read",
    possession: "any",
  })
  async _gameBanksMeta(
    @graphql.Args() args: GameBankCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameBank])
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "read",
    possession: "any",
  })
  async gameBanks(
    @graphql.Args() args: GameBankFindManyArgs
  ): Promise<GameBank[]> {
    return this.service.gameBanks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameBank, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "read",
    possession: "own",
  })
  async gameBank(
    @graphql.Args() args: GameBankFindUniqueArgs
  ): Promise<GameBank | null> {
    const result = await this.service.gameBank(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameBank)
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "create",
    possession: "any",
  })
  async createGameBank(
    @graphql.Args() args: CreateGameBankArgs
  ): Promise<GameBank> {
    return await this.service.createGameBank({
      ...args,
      data: {
        ...args.data,

        shop: {
          connect: args.data.shop,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameBank)
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "update",
    possession: "any",
  })
  async updateGameBank(
    @graphql.Args() args: UpdateGameBankArgs
  ): Promise<GameBank | null> {
    try {
      return await this.service.updateGameBank({
        ...args,
        data: {
          ...args.data,

          shop: {
            connect: args.data.shop,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameBank)
  @nestAccessControl.UseRoles({
    resource: "GameBank",
    action: "delete",
    possession: "any",
  })
  async deleteGameBank(
    @graphql.Args() args: DeleteGameBankArgs
  ): Promise<GameBank | null> {
    try {
      return await this.service.deleteGameBank(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Shop, {
    nullable: true,
    name: "shop",
  })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async getShop(@graphql.Parent() parent: GameBank): Promise<Shop | null> {
    const result = await this.service.getShop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
