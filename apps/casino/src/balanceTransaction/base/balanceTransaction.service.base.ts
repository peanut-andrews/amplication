/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BalanceTransaction as PrismaBalanceTransaction,
  Account as PrismaAccount,
  Product as PrismaProduct,
  Shop as PrismaShop,
} from "@prisma/client";

import { CreateDeposit } from "../CreateDeposit";

export class BalanceTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BalanceTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.balanceTransaction.count(args);
  }

  async balanceTransactions(
    args: Prisma.BalanceTransactionFindManyArgs
  ): Promise<PrismaBalanceTransaction[]> {
    return this.prisma.balanceTransaction.findMany(args);
  }
  async balanceTransaction(
    args: Prisma.BalanceTransactionFindUniqueArgs
  ): Promise<PrismaBalanceTransaction | null> {
    return this.prisma.balanceTransaction.findUnique(args);
  }
  async createBalanceTransaction(
    args: Prisma.BalanceTransactionCreateArgs
  ): Promise<PrismaBalanceTransaction> {
    return this.prisma.balanceTransaction.create(args);
  }
  async updateBalanceTransaction(
    args: Prisma.BalanceTransactionUpdateArgs
  ): Promise<PrismaBalanceTransaction> {
    return this.prisma.balanceTransaction.update(args);
  }
  async deleteBalanceTransaction(
    args: Prisma.BalanceTransactionDeleteArgs
  ): Promise<PrismaBalanceTransaction> {
    return this.prisma.balanceTransaction.delete(args);
  }

  async getPlayerAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.balanceTransaction
      .findUnique({
        where: { id: parentId },
      })
      .playerAccount();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.balanceTransaction
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }

  async getShop(parentId: string): Promise<PrismaShop | null> {
    return this.prisma.balanceTransaction
      .findUnique({
        where: { id: parentId },
      })
      .shop();
  }
  async CreateDeposit(args: CreateDeposit): Promise<boolean> {
    throw new Error("Not implemented");
  }
}
