/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BalanceTransaction } from "./BalanceTransaction";
import { BalanceTransactionCountArgs } from "./BalanceTransactionCountArgs";
import { BalanceTransactionFindManyArgs } from "./BalanceTransactionFindManyArgs";
import { BalanceTransactionFindUniqueArgs } from "./BalanceTransactionFindUniqueArgs";
import { CreateBalanceTransactionArgs } from "./CreateBalanceTransactionArgs";
import { UpdateBalanceTransactionArgs } from "./UpdateBalanceTransactionArgs";
import { DeleteBalanceTransactionArgs } from "./DeleteBalanceTransactionArgs";
import { Account } from "../../account/base/Account";
import { Product } from "../../product/base/Product";
import { Shop } from "../../shop/base/Shop";
import { CreateDeposit } from "../CreateDeposit";
import { BalanceTransactionService } from "../balanceTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BalanceTransaction)
export class BalanceTransactionResolverBase {
  constructor(
    protected readonly service: BalanceTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "read",
    possession: "any",
  })
  async _balanceTransactionsMeta(
    @graphql.Args() args: BalanceTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BalanceTransaction])
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "read",
    possession: "any",
  })
  async balanceTransactions(
    @graphql.Args() args: BalanceTransactionFindManyArgs
  ): Promise<BalanceTransaction[]> {
    return this.service.balanceTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BalanceTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "read",
    possession: "own",
  })
  async balanceTransaction(
    @graphql.Args() args: BalanceTransactionFindUniqueArgs
  ): Promise<BalanceTransaction | null> {
    const result = await this.service.balanceTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BalanceTransaction)
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "create",
    possession: "any",
  })
  async createBalanceTransaction(
    @graphql.Args() args: CreateBalanceTransactionArgs
  ): Promise<BalanceTransaction> {
    return await this.service.createBalanceTransaction({
      ...args,
      data: {
        ...args.data,

        playerAccount: {
          connect: args.data.playerAccount,
        },

        product: {
          connect: args.data.product,
        },

        shop: {
          connect: args.data.shop,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BalanceTransaction)
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "update",
    possession: "any",
  })
  async updateBalanceTransaction(
    @graphql.Args() args: UpdateBalanceTransactionArgs
  ): Promise<BalanceTransaction | null> {
    try {
      return await this.service.updateBalanceTransaction({
        ...args,
        data: {
          ...args.data,

          playerAccount: {
            connect: args.data.playerAccount,
          },

          product: {
            connect: args.data.product,
          },

          shop: {
            connect: args.data.shop,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BalanceTransaction)
  @nestAccessControl.UseRoles({
    resource: "BalanceTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteBalanceTransaction(
    @graphql.Args() args: DeleteBalanceTransactionArgs
  ): Promise<BalanceTransaction | null> {
    try {
      return await this.service.deleteBalanceTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "playerAccount",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async getPlayerAccount(
    @graphql.Parent() parent: BalanceTransaction
  ): Promise<Account | null> {
    const result = await this.service.getPlayerAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(
    @graphql.Parent() parent: BalanceTransaction
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Shop, {
    nullable: true,
    name: "shop",
  })
  @nestAccessControl.UseRoles({
    resource: "Shop",
    action: "read",
    possession: "any",
  })
  async getShop(
    @graphql.Parent() parent: BalanceTransaction
  ): Promise<Shop | null> {
    const result = await this.service.getShop(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => Boolean)
  async CreateDeposit(
    @graphql.Args()
    args: CreateDeposit
  ): Promise<boolean> {
    return this.service.CreateDeposit(args);
  }
}
